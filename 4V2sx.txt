diff --git a/.coafile b/.coafile
new file mode 100644
index 0000000..7903dd1
--- /dev/null
+++ b/.coafile
@@ -0,0 +1,14 @@
+# Generated by coala-quickstart on 02 May 2017.
+[default]
+bears = InvalidLinkBear, FilenameBear, coalaBear
+files = **.yml, **.py, **.md
+ignore = 
+[markdown]
+bears = MarkdownBear, LineLengthBear
+files = **.md
+[yaml]
+bears = YAMLLintBear, LineLengthBear
+files = **.yml
+[python]
+bears = PycodestyleBear
+files = **.py
diff --git a/coala-ci.log b/coala-ci.log
new file mode 100644
index 0000000..54abcfa
--- /dev/null
+++ b/coala-ci.log
@@ -0,0 +1,1174 @@
+Executing section Default...
+
+.travis.yml
+|  12| ••#•Create•two•diff•files,•and•upload•to•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+
+.travis.yml
+|  17| ••-•cat•sans-whitespace.diff•|•curl•-F•'clbin=<-'•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+
+.travis.yml
+|  19| ••-•cat•with-whitespace.diff•|•curl•-F•'clbin=<-'•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+
+.travis.yml
+|  20| ••#•Upload•logs•to•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+
+.travis.yml
+|  21| ••-•cat•coala-ci.log•|•curl•-F•'clbin=<-'•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+Executing section markdown...
+|    | [NORMAL] MarkdownBear:
+|    | The text does not comply to the set style.
+|----|    | /app/super_resolution/README.md
+|    |++++| /app/super_resolution/README.md
+|  20|  20|   --threads             number of threads for data loader to use Default=4
+|  21|  21|   --seed                random seed to use. Default=123
+|  22|  22| ```
+|  23|    |-This example trains a super-resolution network on the [BSD300 dataset](https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/), using crops from the 200 training images, and evaluating on crops of the 100 test images. A snapshot of the model after every epoch with filename model_epoch_<epoch_number>.pth
+|    |  23|+
+|    |  24|+This example trains a super-resolution network on the [BSD300 dataset](https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/), using crops from the 200 training images, and evaluating on crops of the 100 test images. A snapshot of the model after every epoch with filename model*epoch*<epoch_number>.pth
+|  24|  25| 
+|  25|  26| ## Example Usage:
+|  26|  27| 
+|    | [NORMAL] MarkdownBear:
+|    | The text does not comply to the set style.
+|----|    | /app/super_resolution/README.md
+|    |++++| /app/super_resolution/README.md
+|  29|  29| `python main.py --upscale_factor 3 --batchSize 4 --testBatchSize 100 --nEpochs 30 --lr 0.001`
+|  30|  30| 
+|  31|  31| ### Super Resolve
+|    |  32|+
+|  32|  33| `python super_resolve.py --input_image dataset/BSDS300/images/test/16077.jpg --model model_epoch_500.pth --output_filename out.png`
+
+super_resolution/README.md
+|   3| This•example•illustrates•how•to•use•the•efficient•sub-pixel•convolution•layer•described•in••["Real-Time•Single•Image•and•Video•Super-Resolution•Using•an•Efficient•Sub-Pixel•Convolutional•Neural•Network"•-•Shi•et•al.](https://arxiv.org/abs/1609.05158)•for•increasing•spatial•resolution•within•your•network•for•tasks•such•as•superresolution.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (339 > 79)
+
+super_resolution/README.md
+|  23| This•example•trains•a•super-resolution•network•on•the•[BSD300•dataset](https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/),•using•crops•from•the•200•training•images,•and•evaluating•on•crops•of•the•100•test•images.•A•snapshot•of•the•model•after•every•epoch•with•filename•model_epoch_<epoch_number>.pth
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (314 > 79)
+
+super_resolution/README.md
+|  29| `python•main.py•--upscale_factor•3•--batchSize•4•--testBatchSize•100•--nEpochs•30•--lr•0.001`
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (93 > 79)
+
+super_resolution/README.md
+|  32| `python•super_resolve.py•--input_image•dataset/BSDS300/images/test/16077.jpg•--model•model_epoch_500.pth•--output_filename•out.png`
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (131 > 79)
+|    | [NORMAL] MarkdownBear:
+|    | The text does not comply to the set style.
+|----|    | /app/time_sequence_prediction/README.md
+|    |++++| /app/time_sequence_prediction/README.md
+|   1|   1| # Time Sequence Prediction
+|    |   2|+
+|   2|   3| This is a toy example for beginners to start with. It is helpful for learning both pytorch and time sequence prediction. Two LSTMCell units are used in this example to learn some sine wave signals starting at different phases. After learning the sine waves, the network tries to predict the signal values in the future. The results is shown in the picture below.
+|   3|   4| 
+|   4|   5| ## Usage
+|    | [NORMAL] MarkdownBear:
+|    | The text does not comply to the set style.
+|----|    | /app/time_sequence_prediction/README.md
+|    |++++| /app/time_sequence_prediction/README.md
+|   9|   9| ```
+|  10|  10| 
+|  11|  11| ## Result
+|    |  12|+
+|  12|  13| The initial signal and the predicted results are shown in the image. We first give some initial signals (full line). The network will  subsequently give some predicted results (dash line). It can be concluded that the network can generate new sine waves.
+|  13|  14| ![image](https://cloud.githubusercontent.com/assets/1419566/24184438/e24f5280-0f08-11e7-8f8b-4d972b527a81.png)
+
+time_sequence_prediction/README.md
+|   2| This•is•a•toy•example•for•beginners•to•start•with.•It•is•helpful•for•learning•both•pytorch•and•time•sequence•prediction.•Two•LSTMCell•units•are•used•in•this•example•to•learn•some•sine•wave•signals•starting•at•different•phases.•After•learning•the•sine•waves,•the•network•tries•to•predict•the•signal•values•in•the•future.•The•results•is•shown•in•the•picture•below.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (362 > 79)
+
+time_sequence_prediction/README.md
+|  12| The•initial•signal•and•the•predicted•results•are•shown•in•the•image.•We•first•give•some•initial•signals•(full•line).•The•network•will••subsequently•give•some•predicted•results•(dash•line).•It•can•be•concluded•that•the•network•can•generate•new•sine•waves.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (254 > 79)
+
+time_sequence_prediction/README.md
+|  13| ![image](https://cloud.githubusercontent.com/assets/1419566/24184438/e24f5280-0f08-11e7-8f8b-4d972b527a81.png)
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (110 > 79)
+
+word_language_model/README.md
+|   3| This•example•trains•a•multi-layer•RNN•(Elman,•GRU,•or•LSTM)•on•a•language•modeling•task.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (88 > 79)
+
+word_language_model/README.md
+|   8| python•main.py•--cuda•--epochs•6••••••••#•Train•a•LSTM•on•PTB•with•CUDA,•reaching•perplexity•of•117.61
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (102 > 79)
+
+word_language_model/README.md
+|   9| python•main.py•--cuda•--epochs•6•--tied•#•Train•a•tied•LSTM•on•PTB•with•CUDA,•reaching•perplexity•of•110.44
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (107 > 79)
+
+word_language_model/README.md
+|  10| python•main.py•--cuda•--tied••••••••••••#•Train•a•tied•LSTM•on•PTB•with•CUDA•for•40•epochs,•reaching•perplexity•of•87.17
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (120 > 79)
+
+word_language_model/README.md
+|  11| python•generate.py••••••••••••••••••••••#•Generate•samples•from•the•trained•LSTM•model.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (87 > 79)
+
+word_language_model/README.md
+|  14| The•model•uses•the•`nn.RNN`•module•(and•its•sister•modules•`nn.GRU`•and•`nn.LSTM`)
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (82 > 79)
+
+word_language_model/README.md
+|  15| which•will•automatically•use•the•cuDNN•backend•if•run•on•CUDA•with•cuDNN•installed.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (83 > 79)
+
+word_language_model/README.md
+|  48| python•main.py•--cuda•--emsize•650•--nhid•650•--dropout•0.5•--epochs•40•••••••••••#•Test•perplexity•of•80.97
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (108 > 79)
+
+word_language_model/README.md
+|  49| python•main.py•--cuda•--emsize•650•--nhid•650•--dropout•0.5•--epochs•40•--tied••••#•Test•perplexity•of•75.96
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (108 > 79)
+
+word_language_model/README.md
+|  50| python•main.py•--cuda•--emsize•1500•--nhid•1500•--dropout•0.65•--epochs•40••••••••#•Test•perplexity•of•77.42
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (108 > 79)
+
+word_language_model/README.md
+|  51| python•main.py•--cuda•--emsize•1500•--nhid•1500•--dropout•0.65•--epochs•40•--tied•#•Test•perplexity•of•72.30
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (108 > 79)
+
+word_language_model/README.md
+|  55| [Recurrent•Neural•Network•Regularization•(Zaremba•et•al.•2014)](https://arxiv.org/pdf/1409.2329.pdf)
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (100 > 79)
+
+word_language_model/README.md
+|  56| and•are•similar•to•[Using•the•Output•Embedding•to•Improve•Language•Models•(Press•&•Wolf•2016](https://arxiv.org/abs/1608.05859)•and•[Tying•Word•Vectors•and•Word•Classifiers:•A•Loss•Framework•for•Language•Modeling•(Inan•et•al.•2016)](https://arxiv.org/pdf/1611.01462.pdf),•though•both•of•these•papers•have•improved•perplexities•by•using•a•form•of•recurrent•dropout•[(variational•dropout)](http://papers.nips.cc/paper/6241-a-theoretically-grounded-application-of-dropout-in-recurrent-neural-networks).
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (499 > 79)
+|    | [NORMAL] MarkdownBear:
+|    | The text does not comply to the set style.
+|----|    | /app/dcgan/README.md
+|    |++++| /app/dcgan/README.md
+|  10|  10| After every epoch, models are saved to: `netG_epoch_%d.pth` and `netD_epoch_%d.pth`
+|  11|  11| 
+|  12|  12| ## Downloading the dataset
+|    |  13|+
+|  13|  14| You can download the LSUN dataset by cloning [this repo](https://github.com/fyu/lsun) and running
+|    |  15|+
+|  14|  16| ```
+|  15|  17| python download.py -c bedroom
+|  16|  18| ```
+|    | [NORMAL] MarkdownBear:
+|    | The text does not comply to the set style.
+|----|    | /app/dcgan/README.md
+|    |++++| /app/dcgan/README.md
+|  16|  16| ```
+|  17|  17| 
+|  18|  18| ## Usage
+|    |  19|+
+|  19|  20| ```
+|  20|  21| usage: main.py [-h] --dataset DATASET --dataroot DATAROOT [--workers WORKERS]
+|  21|  22|                [--batchSize BATCHSIZE] [--imageSize IMAGESIZE] [--nz NZ]
+
+dcgan/README.md
+|   3| This•example•implements•the•paper•[Unsupervised•Representation•Learning•with•Deep•Convolutional•Generative•Adversarial•Networks](http://arxiv.org/abs/1511.06434)
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (161 > 79)
+
+dcgan/README.md
+|   5| The•implementation•is•very•close•to•the•Torch•implementation•[dcgan.torch](https://github.com/soumith/dcgan.torch)
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (114 > 79)
+
+dcgan/README.md
+|   7| After•every•100•training•iterations,•the•files•`real_samples.png`•and•`fake_samples.png`•are•written•to•disk
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (108 > 79)
+
+dcgan/README.md
+|  10| After•every•epoch,•models•are•saved•to:•`netG_epoch_%d.pth`•and•`netD_epoch_%d.pth`
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (83 > 79)
+
+dcgan/README.md
+|  13| You•can•download•the•LSUN•dataset•by•cloning•[this•repo](https://github.com/fyu/lsun)•and•running
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (97 > 79)
+
+vae/README.md
+|   4| Variational•Auto-Encoder](http://arxiv.org/abs/1312.6114)•by•Kingma•and•Welling.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (80 > 79)
+
+vae/README.md
+|   5| It•uses•ReLUs•and•the•adam•optimizer,•instead•of•sigmoids•and•adagrad.•These•changes•make•the•network•converge•much•faster.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (123 > 79)
+
+README.md
+|  18| -•[Neural•Machine•Translation•using•sequence-to-sequence•RNN•with•attention•(OpenNMT)](https://github.com/OpenNMT/OpenNMT-py)
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (125 > 79)
+
+imagenet/README.md
+|   3| This•implements•training•of•popular•model•architectures,•such•as•ResNet,•AlexNet,•and•VGG•on•the•ImageNet•dataset.
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (114 > 79)
+
+imagenet/README.md
+|   9| -•Download•the•ImageNet•dataset•and•move•validation•images•to•labeled•subfolders
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (80 > 79)
+
+imagenet/README.md
+|  13| To•train•a•model,•run•`main.py`•with•the•desired•model•architecture•and•the•path•to•the•ImageNet•dataset:
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (105 > 79)
+
+imagenet/README.md
+|  19| The•default•learning•rate•schedule•starts•at•0.1•and•decays•by•a•factor•of•10•every•30•epochs.•This•is•appropriate•for•ResNet•and•models•with•batch•normalization,•but•too•high•for•AlexNet•and•VGG.•Use•0.01•as•the•initial•learning•rate•for•AlexNet•or•VGG:
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (254 > 79)
+
+imagenet/README.md
+|  22| python•main.py•-a•alexnet•--lr•0.01•[imagenet-folder•with•train•and•val•folders]
+|    | [NORMAL] LineLengthBear:
+|    | Line is longer than allowed. (80 > 79)
+Executing section yaml...
+Executing section python...
+
+time_sequence_prediction/generate_sine_wave.py
+|  12| 
+|    | [NORMAL] PycodestyleBear (W391):
+|    | W391 blank line at end of file'
+
+time_sequence_prediction/train.py
+|   3| import•torch.nn•as•nn•
+|    | [NORMAL] PycodestyleBear (W291):
+|    | W291 trailing whitespace'
+
+time_sequence_prediction/train.py
+|   9| import•matplotlib.pyplot•as•plt
+|    | [NORMAL] PycodestyleBear (E402):
+|    | E402 module level import not at top of file'
+
+time_sequence_prediction/train.py
+|  11| class•Sequence(nn.Module):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+time_sequence_prediction/train.py
+|  17| ••••def•forward(self,•input,•future•=•0):
+|    | [NORMAL] PycodestyleBear (E251):
+|    | E251 unexpected spaces around keyword / parameter equals'
+
+time_sequence_prediction/train.py
+|  17| ••••def•forward(self,•input,•future•=•0):
+|    | [NORMAL] PycodestyleBear (E251):
+|    | E251 unexpected spaces around keyword / parameter equals'
+
+time_sequence_prediction/train.py
+|  19| ••••••••h_t•=•Variable(torch.zeros(input.size(0),•51).double(),•requires_grad=False)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (84 > 79 characters)'
+
+time_sequence_prediction/train.py
+|  20| ••••••••c_t•=•Variable(torch.zeros(input.size(0),•51).double(),•requires_grad=False)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (84 > 79 characters)'
+
+time_sequence_prediction/train.py
+|  21| ••••••••h_t2•=•Variable(torch.zeros(input.size(0),•1).double(),•requires_grad=False)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (84 > 79 characters)'
+
+time_sequence_prediction/train.py
+|  22| ••••••••c_t2•=•Variable(torch.zeros(input.size(0),•1).double(),•requires_grad=False)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (84 > 79 characters)'
+
+time_sequence_prediction/train.py
+|  28| ••••••••for•i•in•range(future):#•if•we•should•predict•the•future
+|    | [NORMAL] PycodestyleBear (E261):
+|    | E261 at least two spaces before inline comment'
+
+time_sequence_prediction/train.py
+|  37| if•__name__•==•'__main__':
+|    | [NORMAL] PycodestyleBear (E303):
+|    | E303 too many blank lines (3)'
+
+time_sequence_prediction/train.py
+|  51| ••••#begin•to•train
+|    | [NORMAL] PycodestyleBear (E265):
+|    | E265 block comment should start with '# ''
+
+time_sequence_prediction/train.py
+|  54| ••••••••def•closure():
+|    | [NORMAL] PycodestyleBear (E301):
+|    | E301 expected 1 blank line, found 0'
+
+time_sequence_prediction/train.py
+|  64| ••••••••pred•=•seq(input[:3],•future•=•future)
+|    | [NORMAL] PycodestyleBear (E251):
+|    | E251 unexpected spaces around keyword / parameter equals'
+
+time_sequence_prediction/train.py
+|  64| ••••••••pred•=•seq(input[:3],•future•=•future)
+|    | [NORMAL] PycodestyleBear (E251):
+|    | E251 unexpected spaces around keyword / parameter equals'
+
+time_sequence_prediction/train.py
+|  67| ••••••••plt.figure(figsize=(30,10))
+|    | [NORMAL] PycodestyleBear (E231):
+|    | E231 missing whitespace after ',''
+
+time_sequence_prediction/train.py
+|  68| ••••••••plt.title('Predict•future•values•for•time•sequences\n(Dashlines•are•predicted•values)',•fontsize=30)•
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (108 > 79 characters)'
+
+time_sequence_prediction/train.py
+|  68| ••••••••plt.title('Predict•future•values•for•time•sequences\n(Dashlines•are•predicted•values)',•fontsize=30)•
+|    | [NORMAL] PycodestyleBear (W291):
+|    | W291 trailing whitespace'
+
+time_sequence_prediction/train.py
+|  73| ••••••••def•draw(yi,•color):
+|    | [NORMAL] PycodestyleBear (E301):
+|    | E301 expected 1 blank line, found 0'
+
+time_sequence_prediction/train.py
+|  74| ••••••••••••plt.plot(np.arange(input.size(1)),•yi[:input.size(1)],•color,•linewidth•=•2.0)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (90 > 79 characters)'
+
+time_sequence_prediction/train.py
+|  74| ••••••••••••plt.plot(np.arange(input.size(1)),•yi[:input.size(1)],•color,•linewidth•=•2.0)
+|    | [NORMAL] PycodestyleBear (E251):
+|    | E251 unexpected spaces around keyword / parameter equals'
+
+time_sequence_prediction/train.py
+|  74| ••••••••••••plt.plot(np.arange(input.size(1)),•yi[:input.size(1)],•color,•linewidth•=•2.0)
+|    | [NORMAL] PycodestyleBear (E251):
+|    | E251 unexpected spaces around keyword / parameter equals'
+
+time_sequence_prediction/train.py
+|  75| ••••••••••••plt.plot(np.arange(input.size(1),•input.size(1)•+•future),•yi[input.size(1):],•color•+•':',•linewidth•=•2.0)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (120 > 79 characters)'
+
+time_sequence_prediction/train.py
+|  75| ••••••••••••plt.plot(np.arange(input.size(1),•input.size(1)•+•future),•yi[input.size(1):],•color•+•':',•linewidth•=•2.0)
+|    | [NORMAL] PycodestyleBear (E251):
+|    | E251 unexpected spaces around keyword / parameter equals'
+
+time_sequence_prediction/train.py
+|  75| ••••••••••••plt.plot(np.arange(input.size(1),•input.size(1)•+•future),•yi[input.size(1):],•color•+•':',•linewidth•=•2.0)
+|    | [NORMAL] PycodestyleBear (E251):
+|    | E251 unexpected spaces around keyword / parameter equals'
+
+time_sequence_prediction/train.py
+|  79| ••••••••plt.savefig('predict%d.pdf'%i)
+|    | [NORMAL] PycodestyleBear (E228):
+|    | E228 missing whitespace around modulo operator'
+
+time_sequence_prediction/train.py
+|  81| 
+|    | [NORMAL] PycodestyleBear (W391):
+|    | W391 blank line at end of file'
+
+super_resolution/model.py
+|  41| ••••••••self.conv1.weight.data.copy_(_get_orthogonal_init_weights(self.conv1.weight)•*•sqrt(2))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (95 > 79 characters)'
+
+super_resolution/model.py
+|  42| ••••••••self.conv2.weight.data.copy_(_get_orthogonal_init_weights(self.conv2.weight)•*•sqrt(2))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (95 > 79 characters)'
+
+super_resolution/model.py
+|  43| ••••••••self.conv3.weight.data.copy_(_get_orthogonal_init_weights(self.conv3.weight)•*•sqrt(2))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (95 > 79 characters)'
+
+super_resolution/model.py
+|  44| ••••••••self.conv4.weight.data.copy_(_get_orthogonal_init_weights(self.conv4.weight))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (85 > 79 characters)'
+
+mnist/main.py
+|  27| ••••••••••••••••••••help='how•many•batches•to•wait•before•logging•training•status')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (83 > 79 characters)'
+
+mnist/main.py
+|  70| model•=•Net()
+|    | [NORMAL] PycodestyleBear (E305):
+|    | E305 expected 2 blank lines after class or function definition, found 1'
+
+mnist/main.py
+|  76| def•train(epoch):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+mnist/main.py
+|  92| def•test(epoch):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+mnist/main.py
+| 102| ••••••••pred•=•output.data.max(1)[1]•#•get•the•index•of•the•max•log-probability
+|    | [NORMAL] PycodestyleBear (E261):
+|    | E261 at least two spaces before inline comment'
+
+mnist/main.py
+| 106| ••••test_loss•/=•len(test_loader)•#•loss•function•already•averages•over•batch•size
+|    | [NORMAL] PycodestyleBear (E261):
+|    | E261 at least two spaces before inline comment'
+
+mnist/main.py
+| 106| ••••test_loss•/=•len(test_loader)•#•loss•function•already•averages•over•batch•size
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+mnist/main.py
+| 107| ••••print('\nTest•set:•Average•loss:•{:.4f},•Accuracy:•{}/{}•({:.0f}%)\n'.format(
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+snli/train.py
+|   6| import•torch.optim•as•O
+|    | [NORMAL] PycodestyleBear (E741):
+|    | E741 ambiguous variable name 'O''
+
+snli/train.py
+|  29| ••••••••inputs.vocab.load_vectors(wv_dir=args.data_cache,•wv_type=args.word_vectors,•wv_dim=args.d_embed)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (105 > 79 characters)'
+
+snli/train.py
+|  45| ••••model•=•torch.load(args.resume_snapshot,•map_location=lambda•storage,•locatoin:•storage.cuda(args.gpu))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (107 > 79 characters)'
+
+snli/train.py
+|  59| header•=•'••Time•Epoch•Iteration•Progress••••(%Epoch)•••Loss•••Dev/Loss•••••Accuracy••Dev/Accuracy'
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (99 > 79 characters)'
+
+snli/train.py
+|  60| dev_log_template•=•'•'.join('{:>6.0f},{:>5.0f},{:>9.0f},{:>5.0f}/{:<5.0f}•{:>7.0f}%,{:>8.6f},{:8.6f},{:12.4f},{:12.4f}'.split(','))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (131 > 79 characters)'
+
+snli/train.py
+|  61| log_template•=•••••'•'.join('{:>6.0f},{:>5.0f},{:>9.0f},{:>5.0f}/{:<5.0f}•{:>7.0f}%,{:>8.6f},{},{:12.4f},{}'.split(','))
+|    | [NORMAL] PycodestyleBear (E222):
+|    | E222 multiple spaces after operator'
+
+snli/train.py
+|  61| log_template•=•••••'•'.join('{:>6.0f},{:>5.0f},{:>9.0f},{:>5.0f}/{:<5.0f}•{:>7.0f}%,{:>8.6f},{},{:12.4f},{}'.split(','))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (120 > 79 characters)'
+
+snli/train.py
+|  69| ••••••••model.train();•opt.zero_grad()
+|    | [NORMAL] PycodestyleBear (E702):
+|    | E702 multiple statements on one line (semicolon)'
+
+snli/train.py
+|  72| ••••••••n_correct•+=•(torch.max(answer,•1)[1].view(batch.label.size()).data•==•batch.label.data).sum()
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (102 > 79 characters)'
+
+snli/train.py
+|  76| ••••••••loss.backward();•opt.step()
+|    | [NORMAL] PycodestyleBear (E702):
+|    | E702 multiple statements on one line (semicolon)'
+
+snli/train.py
+|  79| ••••••••••••snapshot_path•=•snapshot_prefix•+•'_acc_{:.4f}_loss_{:.6f}_iter_{}_model.pt'.format(train_acc,•loss.data[0],•iterations)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (132 > 79 characters)'
+
+snli/train.py
+|  85| ••••••••••••model.eval();•dev_iter.init_epoch()
+|    | [NORMAL] PycodestyleBear (E702):
+|    | E702 multiple statements on one line (semicolon)'
+
+snli/train.py
+|  88| •••••••••••••••••answer•=•model(dev_batch)
+|    | [NORMAL] PycodestyleBear (E111):
+|    | E111 indentation is not a multiple of four'
+
+snli/train.py
+|  89| •••••••••••••••••n_dev_correct•+=•(torch.max(answer,•1)[1].view(dev_batch.label.size()).data•==•dev_batch.label.data).sum()
+|    | [NORMAL] PycodestyleBear (E111):
+|    | E111 indentation is not a multiple of four'
+
+snli/train.py
+|  89| •••••••••••••••••n_dev_correct•+=•(torch.max(answer,•1)[1].view(dev_batch.label.size()).data•==•dev_batch.label.data).sum()
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (123 > 79 characters)'
+
+snli/train.py
+|  90| •••••••••••••••••dev_loss•=•criterion(answer,•dev_batch.label)
+|    | [NORMAL] PycodestyleBear (E111):
+|    | E111 indentation is not a multiple of four'
+
+snli/train.py
+|  93| ••••••••••••••••epoch,•iterations,•1+batch_idx,•len(train_iter),
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+snli/train.py
+|  94| ••••••••••••••••100.•*•(1+batch_idx)•/•len(train_iter),•loss.data[0],•dev_loss.data[0],•train_acc,•dev_acc))
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+snli/train.py
+|  94| ••••••••••••••••100.•*•(1+batch_idx)•/•len(train_iter),•loss.data[0],•dev_loss.data[0],•train_acc,•dev_acc))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (108 > 79 characters)'
+
+snli/train.py
+|  98| ••••••••••••••••snapshot_path•=•snapshot_prefix•+•'_devacc_{}_devloss_{}__iter_{}_model.pt'.format(dev_acc,•dev_loss.data[0],•iterations)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (137 > 79 characters)'
+
+snli/train.py
+| 105| ••••••••••••••••epoch,•iterations,•1+batch_idx,•len(train_iter),
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+snli/train.py
+| 106| ••••••••••••••••100.•*•(1+batch_idx)•/•len(train_iter),•loss.data[0],•'•'*8,•n_correct/n_total*100,•'•'*12))
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+snli/train.py
+| 106| ••••••••••••••••100.•*•(1+batch_idx)•/•len(train_iter),•loss.data[0],•'•'*8,•n_correct/n_total*100,•'•'*12))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (108 > 79 characters)'
+
+snli/train.py
+| 108| 
+|    | [NORMAL] PycodestyleBear (W391):
+|    | W391 blank line at end of file'
+
+snli/util.py
+|   4| def•get_args():
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+snli/util.py
+|  17| ••••parser.add_argument('--no-bidirectional',•action='store_false',•dest='birnn')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+snli/util.py
+|  19| ••••parser.add_argument('--no-projection',•action='store_false',•dest='projection')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (83 > 79 characters)'
+
+snli/util.py
+|  23| ••••parser.add_argument('--data_cache',•type=str,•default=os.path.join(os.getcwd(),•'.data_cache'))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (99 > 79 characters)'
+
+snli/util.py
+|  24| ••••parser.add_argument('--vector_cache',•type=str,•default=os.path.join(os.getcwd(),•'.vector_cache/input_vectors.pt'))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (120 > 79 characters)'
+
+reinforcement_learning/reinforce.py
+|  65| ••••rewards•=•(rewards•-•rewards.mean())•/•(rewards.std()•+•np.finfo(np.float32).eps)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (85 > 79 characters)'
+
+reinforcement_learning/reinforce.py
+|  69| ••••autograd.backward(policy.saved_actions,•[None•for•_•in•policy.saved_actions])
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+reinforcement_learning/reinforce.py
+|  78| ••••for•t•in•range(10000):•#•Don't•infinite•loop•while•learning
+|    | [NORMAL] PycodestyleBear (E261):
+|    | E261 at least two spaces before inline comment'
+
+reinforcement_learning/reinforce.py
+|  80| ••••••••state,•reward,•done,•_•=•env.step(action[0,0])
+|    | [NORMAL] PycodestyleBear (E231):
+|    | E231 missing whitespace after ',''
+
+reinforcement_learning/reinforce.py
+|  94| ••••••••••••••"the•last•episode•runs•to•{}•time•steps!".format(running_reward,•t))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+mnist_hogwild/train.py
+|   8| def•train(rank,•args,•model):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+mnist_hogwild/train.py
+|  17| ••••••••••••••••••••transform=transforms.Compose([
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+mnist_hogwild/train.py
+|  29| ••••optimizer•=•optim.SGD(model.parameters(),•lr=args.lr,•momentum=args.momentum)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+mnist_hogwild/train.py
+|  59| ••••••••pred•=•output.data.max(1)[1]•#•get•the•index•of•the•max•log-probability
+|    | [NORMAL] PycodestyleBear (E261):
+|    | E261 at least two spaces before inline comment'
+
+mnist_hogwild/train.py
+|  63| ••••test_loss•/=•len(data_loader)•#•loss•function•already•averages•over•batch•size
+|    | [NORMAL] PycodestyleBear (E261):
+|    | E261 at least two spaces before inline comment'
+
+mnist_hogwild/train.py
+|  63| ••••test_loss•/=•len(data_loader)•#•loss•function•already•averages•over•batch•size
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+mnist_hogwild/train.py
+|  64| ••••print('\nTest•set:•Average•loss:•{:.4f},•Accuracy:•{}/{}•({:.0f}%)\n'.format(
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+word_language_model/data.py
+|   4| class•Dictionary(object):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+word_language_model/generate.py
+|  40| ••••••••print("WARNING:•You•have•a•CUDA•device,•so•you•should•probably•run•with•--cuda")
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (88 > 79 characters)'
+
+super_resolution/main.py
+|  15| parser.add_argument('--upscale_factor',•type=int,•required=True,•help="super•resolution•upscale•factor")
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (104 > 79 characters)'
+
+super_resolution/main.py
+|  16| parser.add_argument('--batchSize',•type=int,•default=64,•help='training•batch•size')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (84 > 79 characters)'
+
+super_resolution/main.py
+|  17| parser.add_argument('--testBatchSize',•type=int,•default=10,•help='testing•batch•size')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (87 > 79 characters)'
+
+super_resolution/main.py
+|  18| parser.add_argument('--nEpochs',•type=int,•default=2,•help='number•of•epochs•to•train•for')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (91 > 79 characters)'
+
+super_resolution/main.py
+|  19| parser.add_argument('--lr',•type=float,•default=0.01,•help='Learning•Rate.•Default=0.01')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (89 > 79 characters)'
+
+super_resolution/main.py
+|  21| parser.add_argument('--threads',•type=int,•default=4,•help='number•of•threads•for•data•loader•to•use')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (102 > 79 characters)'
+
+super_resolution/main.py
+|  22| parser.add_argument('--seed',•type=int,•default=123,•help='random•seed•to•use.•Default=123')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (92 > 79 characters)'
+
+super_resolution/main.py
+|  38| training_data_loader•=•DataLoader(dataset=train_set,•num_workers=opt.threads,•batch_size=opt.batchSize,•shuffle=True)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (117 > 79 characters)'
+
+super_resolution/main.py
+|  39| testing_data_loader•=•DataLoader(dataset=test_set,•num_workers=opt.threads,•batch_size=opt.testBatchSize,•shuffle=False)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (120 > 79 characters)'
+
+super_resolution/main.py
+|  66| ••••••••print("===>•Epoch[{}]({}/{}):•Loss:•{:.4f}".format(epoch,•iteration,•len(training_data_loader),•loss.data[0]))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (118 > 79 characters)'
+
+super_resolution/main.py
+|  68| ••••print("===>•Epoch•{}•Complete:•Avg.•Loss:•{:.4f}".format(epoch,•epoch_loss•/•len(training_data_loader)))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (108 > 79 characters)'
+
+super_resolution/main.py
+|  83| ••••print("===>•Avg.•PSNR:•{:.4f}•dB".format(avg_psnr•/•len(testing_data_loader)))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+super_resolution/main.py
+|  91| for•epoch•in•range(1,•opt.nEpochs•+•1):
+|    | [NORMAL] PycodestyleBear (E305):
+|    | E305 expected 2 blank lines after class or function definition, found 1'
+
+super_resolution/super_resolve.py
+|  12| parser.add_argument('--input_image',•type=str,•required=True,•help='input•image•to•use')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (88 > 79 characters)'
+
+super_resolution/super_resolve.py
+|  13| parser.add_argument('--model',•type=str,•required=True,•help='model•file•to•use')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+super_resolution/super_resolve.py
+|  14| parser.add_argument('--output_filename',•type=str,•help='where•to•save•the•output•image')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (89 > 79 characters)'
+
+super_resolution/super_resolve.py
+|  38| out_img•=•Image.merge('YCbCr',•[out_img_y,•out_img_cb,•out_img_cr]).convert('RGB')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+mnist_hogwild/main.py
+|  25| ••••••••••••••••••••help='how•many•batches•to•wait•before•logging•training•status')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (83 > 79 characters)'
+
+mnist_hogwild/main.py
+|  29| class•Net(nn.Module):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+mnist_hogwild/main.py
+|  47| if•__name__•==•'__main__':
+|    | [NORMAL] PycodestyleBear (E305):
+|    | E305 expected 2 blank lines after class or function definition, found 1'
+
+reinforcement_learning/actor_critic.py
+|  33| class•Policy(nn.Module):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 0'
+
+reinforcement_learning/actor_critic.py
+|  71| ••••rewards•=•(rewards•-•rewards.mean())•/•(rewards.std()•+•np.finfo(np.float32).eps)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (85 > 79 characters)'
+
+reinforcement_learning/actor_critic.py
+|  73| ••••••••reward•=•r•-•value.data[0,0]
+|    | [NORMAL] PycodestyleBear (E231):
+|    | E231 missing whitespace after ',''
+
+reinforcement_learning/actor_critic.py
+|  88| ••••for•t•in•range(10000):•#•Don't•infinite•loop•while•learning
+|    | [NORMAL] PycodestyleBear (E261):
+|    | E261 at least two spaces before inline comment'
+
+reinforcement_learning/actor_critic.py
+|  90| ••••••••state,•reward,•done,•_•=•env.step(action[0,0])
+|    | [NORMAL] PycodestyleBear (E231):
+|    | E231 missing whitespace after ',''
+
+reinforcement_learning/actor_critic.py
+| 104| ••••••••••••••"the•last•episode•runs•to•{}•time•steps!".format(running_reward,•t))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+regression/main.py
+|  69| print('==>•Learned•function:\t'•+•poly_desc(fc.weight.data.view(-1),•fc.bias.data))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (83 > 79 characters)'
+
+snli/model.py
+|  27| ••••••••••••••••••••••••num_layers=config.n_layers,•dropout=config.dp_ratio,
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+snli/model.py
+|  28| ••••••••••••••••••••••••bidirectional=config.birnn)
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+snli/model.py
+|  35| ••••••••return•ht[-1]•if•not•self.config.birnn•else•ht[-2:].transpose(0,•1).contiguous().view(batch_size,•-1)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (109 > 79 characters)'
+
+dcgan/main.py
+|  18| parser.add_argument('--dataset',•required=True,•help='cifar10•|•lsun•|•imagenet•|•folder•|•lfw•')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (97 > 79 characters)'
+
+dcgan/main.py
+|  20| parser.add_argument('--workers',•type=int,•help='number•of•data•loading•workers',•default=2)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (92 > 79 characters)'
+
+dcgan/main.py
+|  21| parser.add_argument('--batchSize',•type=int,•default=64,•help='input•batch•size')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+dcgan/main.py
+|  22| parser.add_argument('--imageSize',•type=int,•default=64,•help='the•height•/•width•of•the•input•image•to•network')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (113 > 79 characters)'
+
+dcgan/main.py
+|  23| parser.add_argument('--nz',•type=int,•default=100,•help='size•of•the•latent•z•vector')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (86 > 79 characters)'
+
+dcgan/main.py
+|  26| parser.add_argument('--niter',•type=int,•default=25,•help='number•of•epochs•to•train•for')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (90 > 79 characters)'
+
+dcgan/main.py
+|  27| parser.add_argument('--lr',•type=float,•default=0.0002,•help='learning•rate,•default=0.0002')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (93 > 79 characters)'
+
+dcgan/main.py
+|  28| parser.add_argument('--beta1',•type=float,•default=0.5,•help='beta1•for•adam.•default=0.5')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (91 > 79 characters)'
+
+dcgan/main.py
+|  30| parser.add_argument('--ngpu',•type=int,•default=1,•help='number•of•GPUs•to•use')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (80 > 79 characters)'
+
+dcgan/main.py
+|  31| parser.add_argument('--netG',•default='',•help="path•to•netG•(to•continue•training)")
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (85 > 79 characters)'
+
+dcgan/main.py
+|  32| parser.add_argument('--netD',•default='',•help="path•to•netD•(to•continue•training)")
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (85 > 79 characters)'
+
+dcgan/main.py
+|  33| parser.add_argument('--outf',•default='.',•help='folder•to•output•images•and•model•checkpoints')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (96 > 79 characters)'
+
+dcgan/main.py
+|  55| ••••print("WARNING:•You•have•a•CUDA•device,•so•you•should•probably•run•with•--cuda")
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (84 > 79 characters)'
+
+dcgan/main.py
+|  64| •••••••••••••••••••••••••••••••••••transforms.Normalize((0.5,•0.5,•0.5),•(0.5,•0.5,•0.5)),
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (90 > 79 characters)'
+
+dcgan/main.py
+|  72| ••••••••••••••••••••••••••••transforms.Normalize((0.5,•0.5,•0.5),•(0.5,•0.5,•0.5)),
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (83 > 79 characters)'
+
+dcgan/main.py
+|  79| •••••••••••••••••••••••••••••••transforms.Normalize((0.5,•0.5,•0.5),•(0.5,•0.5,•0.5)),
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (86 > 79 characters)'
+
+dcgan/main.py
+|  81| ••••)
+|    | [NORMAL] PycodestyleBear (E124):
+|    | E124 closing bracket does not match visual indentation'
+
+dcgan/main.py
+|  84| •••••••••••••••••••••••••••••••••••••••••shuffle=True,•num_workers=int(opt.workers))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (84 > 79 characters)'
+
+dcgan/main.py
+| 109| ••••••••••••nn.ConvTranspose2d(•••••nz,•ngf•*•8,•4,•1,•0,•bias=False),
+|    | [NORMAL] PycodestyleBear (E201):
+|    | E201 whitespace after '(''
+
+dcgan/main.py
+| 125| ••••••••••••nn.ConvTranspose2d(••••ngf,••••••nc,•4,•2,•1,•bias=False),
+|    | [NORMAL] PycodestyleBear (E201):
+|    | E201 whitespace after '(''
+
+dcgan/main.py
+| 132| ••••••••••••output•=•nn.parallel.data_parallel(self.main,•input,•range(self.ngpu))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+dcgan/main.py
+| 172| ••••••••••••output•=•nn.parallel.data_parallel(self.main,•input,•range(self.ngpu))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+dcgan/main.py
+| 250| ••••••••print('[%d/%d][%d/%d]•Loss_D:•%.4f•Loss_G:•%.4f•D(x):•%.4f•D(G(z)):•%.4f•/•%.4f'
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (88 > 79 characters)'
+
+dcgan/main.py
+| 255| ••••••••••••••••••••'%s/real_samples.png'•%•opt.outf,
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+dcgan/main.py
+| 256| ••••••••••••••••••••normalize=True)
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+dcgan/main.py
+| 259| ••••••••••••••••••••'%s/fake_samples_epoch_%03d.png'•%•(opt.outf,•epoch),
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+dcgan/main.py
+| 260| ••••••••••••••••••••normalize=True)
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+super_resolution/data.py
+|  15| ••••••••url•=•"http://www2.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/BSDS300-images.tgz"
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (97 > 79 characters)'
+
+super_resolution/data.py
+|  59| •••••••••••••••••••••••••••••input_transform=input_transform(crop_size,•upscale_factor),
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (88 > 79 characters)'
+
+super_resolution/data.py
+|  69| •••••••••••••••••••••••••••••input_transform=input_transform(crop_size,•upscale_factor),
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (88 > 79 characters)'
+
+vae/main.py
+|  20| ••••••••••••••••••••help='how•many•batches•to•wait•before•logging•training•status')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (83 > 79 characters)'
+
+super_resolution/dataset.py
+|   9| ••••return•any(filename.endswith(extension)•for•extension•in•[".png",•".jpg",•".jpeg"])
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (87 > 79 characters)'
+
+super_resolution/dataset.py
+|  21| ••••••••self.image_filenames•=•[join(image_dir,•x)•for•x•in•listdir(image_dir)•if•is_image_file(x)]
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (99 > 79 characters)'
+
+imagenet/main.py
+|  18| ••••if•name.islower()•and•not•name.startswith("__")
+|    | [NORMAL] PycodestyleBear (E128):
+|    | E128 continuation line under-indented for visual indent'
+
+imagenet/main.py
+|  28| ••••••••••••••••••••••••'•|•'.join(model_names)•+
+|    | [NORMAL] PycodestyleBear (E127):
+|    | E127 continuation line over-indented for visual indent'
+
+imagenet/main.py
+|  81| •••#•optionally•resume•from•a•checkpoint
+|    | [NORMAL] PycodestyleBear (E114):
+|    | E114 indentation is not a multiple of four (comment)'
+
+imagenet/main.py
+| 144| ••••••••••••'optimizer'•:•optimizer.state_dict(),
+|    | [NORMAL] PycodestyleBear (E203):
+|    | E203 whitespace before ':''
+
+imagenet/main.py
+| 266| ••••"""Sets•the•learning•rate•to•the•initial•LR•decayed•by•10•every•30•epochs"""
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (80 > 79 characters)'
+
+word_language_model/model.py
+|   4| class•RNNModel(nn.Module):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+word_language_model/model.py
+|   7| ••••def•__init__(self,•rnn_type,•ntoken,•ninp,•nhid,•nlayers,•dropout=0.5,•tie_weights=False):
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (94 > 79 characters)'
+
+word_language_model/model.py
+|  12| ••••••••••••self.rnn•=•getattr(nn,•rnn_type)(ninp,•nhid,•nlayers,•dropout=dropout)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+word_language_model/model.py
+|  15| ••••••••••••••••nonlinearity•=•{'RNN_TANH':•'tanh',•'RNN_RELU':•'relu'}[rnn_type]
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+word_language_model/model.py
+|  17| ••••••••••••••••raise•ValueError(•"""An•invalid•option•for•`--model`•was•supplied,
+|    | [NORMAL] PycodestyleBear (E201):
+|    | E201 whitespace after '(''
+
+word_language_model/model.py
+|  18| •••••••••••••••••••••••••••••••••options•are•['LSTM',•'GRU',•'RNN_TANH'•or•'RNN_RELU']""")
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (90 > 79 characters)'
+
+word_language_model/model.py
+|  19| ••••••••••••self.rnn•=•nn.RNN(ninp,•nhid,•nlayers,•nonlinearity=nonlinearity,•dropout=dropout)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (94 > 79 characters)'
+
+word_language_model/model.py
+|  23| ••••••••#•"Using•the•Output•Embedding•to•Improve•Language•Models"•(Press•&•Wolf•2016)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (85 > 79 characters)'
+
+word_language_model/model.py
+|  26| ••••••••#•"Tying•Word•Vectors•and•Word•Classifiers:•A•Loss•Framework•for•Language•Modeling"•(Inan•et•al.•2016)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (110 > 79 characters)'
+
+word_language_model/model.py
+|  30| ••••••••••••••••raise•ValueError('When•using•the•tied•flag,•nhid•must•be•equal•to•emsize')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (90 > 79 characters)'
+
+word_language_model/model.py
+|  49| ••••••••decoded•=•self.decoder(output.view(output.size(0)*output.size(1),•output.size(2)))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (90 > 79 characters)'
+
+word_language_model/model.py
+|  50| ••••••••return•decoded.view(output.size(0),•output.size(1),•decoded.size(1)),•hidden
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (84 > 79 characters)'
+
+word_language_model/main.py
+|  11| parser•=•argparse.ArgumentParser(description='PyTorch•PennTreeBank•RNN/LSTM•Language•Model')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (92 > 79 characters)'
+
+word_language_model/main.py
+|  15| ••••••••••••••••••••help='type•of•recurrent•net•(RNN_TANH,•RNN_RELU,•LSTM,•GRU)')
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (81 > 79 characters)'
+
+word_language_model/main.py
+|  50| ••••••••print("WARNING:•You•have•a•CUDA•device,•so•you•should•probably•run•with•--cuda")
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (88 > 79 characters)'
+
+word_language_model/main.py
+|  60| def•batchify(data,•bsz):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+word_language_model/main.py
+|  71| eval_batch_size•=•10
+|    | [NORMAL] PycodestyleBear (E305):
+|    | E305 expected 2 blank lines after class or function definition, found 1'
+
+word_language_model/main.py
+|  81| model•=•model.RNNModel(args.model,•ntokens,•args.emsize,•args.nhid,•args.nlayers,•args.dropout,•args.tied)
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (106 > 79 characters)'
+
+word_language_model/main.py
+|  91| def•repackage_hidden(h):
+|    | [NORMAL] PycodestyleBear (E302):
+|    | E302 expected 2 blank lines, found 1'
+
+word_language_model/main.py
+|  92| ••••"""Wraps•hidden•states•in•new•Variables,•to•detach•them•from•their•history."""
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+word_language_model/main.py
+| 130| ••••••••#•Starting•each•batch,•we•detach•the•hidden•state•from•how•it•was•previously•produced.
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (94 > 79 characters)'
+
+word_language_model/main.py
+| 131| ••••••••#•If•we•didn't,•the•model•would•try•backpropagating•all•the•way•to•start•of•the•dataset.
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (96 > 79 characters)'
+
+word_language_model/main.py
+| 138| ••••••••#•`clip_grad_norm`•helps•prevent•the•exploding•gradient•problem•in•RNNs•/•LSTMs.
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (88 > 79 characters)'
+
+word_language_model/main.py
+| 148| ••••••••••••print('|•epoch•{:3d}•|•{:5d}/{:5d}•batches•|•lr•{:02.2f}•|•ms/batch•{:5.2f}•|•'
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (91 > 79 characters)'
+
+word_language_model/main.py
+| 149| ••••••••••••••••••••'loss•{:5.2f}•|•ppl•{:8.2f}'.format(
+|    | [NORMAL] PycodestyleBear (E127):
+|    | E127 continuation line over-indented for visual indent'
+
+word_language_model/main.py
+| 150| ••••••••••••••••epoch,•batch,•len(train_data)•//•args.bptt,•lr,
+|    | [NORMAL] PycodestyleBear (E122):
+|    | E122 continuation line missing indentation or outdented'
+
+word_language_model/main.py
+| 151| ••••••••••••••••elapsed•*•1000•/•args.log_interval,•cur_loss,•math.exp(cur_loss)))
+|    | [NORMAL] PycodestyleBear (E122):
+|    | E122 continuation line missing indentation or outdented'
+
+word_language_model/main.py
+| 151| ••••••••••••••••elapsed•*•1000•/•args.log_interval,•cur_loss,•math.exp(cur_loss)))
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (82 > 79 characters)'
+
+word_language_model/main.py
+| 156| lr•=•args.lr
+|    | [NORMAL] PycodestyleBear (E305):
+|    | E305 expected 2 blank lines after class or function definition, found 1'
+
+word_language_model/main.py
+| 167| ••••••••••••••••'valid•ppl•{:8.2f}'.format(epoch,•(time.time()•-•epoch_start_time),
+|    | [NORMAL] PycodestyleBear (E127):
+|    | E127 continuation line over-indented for visual indent'
+
+word_language_model/main.py
+| 167| ••••••••••••••••'valid•ppl•{:8.2f}'.format(epoch,•(time.time()•-•epoch_start_time),
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (83 > 79 characters)'
+
+word_language_model/main.py
+| 176| ••••••••••••#•Anneal•the•learning•rate•if•no•improvement•has•been•seen•in•the•validation•dataset.
+|    | [NORMAL] PycodestyleBear (E501):
+|    | E501 line too long (97 > 79 characters)'
